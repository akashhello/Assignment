// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto_INCLUDED
#define PROTOBUF_message_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultslog_packetImpl();
void InitDefaultslog_packet();
inline void InitDefaults() {
  InitDefaultslog_packet();
}
}  // namespace protobuf_message_2eproto
namespace tutorial {
class log_packet;
class log_packetDefaultTypeInternal;
extern log_packetDefaultTypeInternal _log_packet_default_instance_;
}  // namespace tutorial
namespace google {
namespace protobuf {
template<> ::tutorial::log_packet* Arena::Create< ::tutorial::log_packet>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tutorial {

// ===================================================================

class log_packet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.log_packet) */ {
 public:
  log_packet();
  virtual ~log_packet();

  log_packet(const log_packet& from);

  inline log_packet& operator=(const log_packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  log_packet(log_packet&& from) noexcept
    : log_packet() {
    *this = ::std::move(from);
  }

  inline log_packet& operator=(log_packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const log_packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const log_packet* internal_default_instance() {
    return reinterpret_cast<const log_packet*>(
               &_log_packet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(log_packet* other);
  friend void swap(log_packet& a, log_packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline log_packet* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<log_packet>(NULL);
  }

  log_packet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<log_packet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const log_packet& from);
  void MergeFrom(const log_packet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(log_packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string log_msg = 1;
  bool has_log_msg() const;
  void clear_log_msg();
  static const int kLogMsgFieldNumber = 1;
  const ::std::string& log_msg() const;
  void set_log_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_log_msg(::std::string&& value);
  #endif
  void set_log_msg(const char* value);
  void set_log_msg(const char* value, size_t size);
  ::std::string* mutable_log_msg();
  ::std::string* release_log_msg();
  void set_allocated_log_msg(::std::string* log_msg);

  // @@protoc_insertion_point(class_scope:tutorial.log_packet)
 private:
  void set_has_log_msg();
  void clear_has_log_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr log_msg_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultslog_packetImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// log_packet

// required string log_msg = 1;
inline bool log_packet::has_log_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void log_packet::set_has_log_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void log_packet::clear_has_log_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void log_packet::clear_log_msg() {
  log_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log_msg();
}
inline const ::std::string& log_packet::log_msg() const {
  // @@protoc_insertion_point(field_get:tutorial.log_packet.log_msg)
  return log_msg_.GetNoArena();
}
inline void log_packet::set_log_msg(const ::std::string& value) {
  set_has_log_msg();
  log_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.log_packet.log_msg)
}
#if LANG_CXX11
inline void log_packet::set_log_msg(::std::string&& value) {
  set_has_log_msg();
  log_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.log_packet.log_msg)
}
#endif
inline void log_packet::set_log_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_log_msg();
  log_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.log_packet.log_msg)
}
inline void log_packet::set_log_msg(const char* value, size_t size) {
  set_has_log_msg();
  log_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.log_packet.log_msg)
}
inline ::std::string* log_packet::mutable_log_msg() {
  set_has_log_msg();
  // @@protoc_insertion_point(field_mutable:tutorial.log_packet.log_msg)
  return log_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* log_packet::release_log_msg() {
  // @@protoc_insertion_point(field_release:tutorial.log_packet.log_msg)
  clear_has_log_msg();
  return log_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void log_packet::set_allocated_log_msg(::std::string* log_msg) {
  if (log_msg != NULL) {
    set_has_log_msg();
  } else {
    clear_has_log_msg();
  }
  log_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_msg);
  // @@protoc_insertion_point(field_set_allocated:tutorial.log_packet.log_msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto_INCLUDED
